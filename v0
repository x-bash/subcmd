# shellcheck shell=sh disable=SC2039

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

JSON_AWK_PATH="$(xrc which json/v0_walk.awk)"

json(){
    local op
    if [ $# -eq 0 ]; then
        op=help
    else
        op="${1}"
        shift
    fi

    case "$op" in
        var)                json_var        "$@" ;;
        color)              json_color      "$@" ;;
        push|append)        json_push       "$@" ;;
        unshift|prepend)    json_prepend    "$@" ;;
        put)                json_put        "$@" ;;
        k|keys)             json_keys       "$@" ;;
        v|values)           json_values     "$@" ;;
        q|query)            json_query      "$@" ;;
        del)                json_del        "$@" ;;
        shift)              json_shift      "$@" ;;
        pop)                json_pop        "$@" ;;
        length)             json_length     "$@" ;;
        unescape)           json_unescape   "$@" ;;
        *)                  json q          "$op" "$@" ;;
    esac
}

# JSON_AWK_PATH="./json_walk.awk"
json_var(){
    local varname="${1:?Provide variable name}"
    shift

    local s
    if [ $# -ne 0 ]; then
        s="$(awk -f "$JSON_AWK_PATH" <<<"$@")"
    else
        s="$(awk -f "$JSON_AWK_PATH" -)"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

json_color(){
    if [ "$1" ]; then
        local varname="${1:?Provide variable name}"
        awk -v format=1 -v color=1 -f "$JSON_AWK_PATH" <<A
${!varname}
A
    else
        awk -v format=1 -v color=1 -f "$JSON_AWK_PATH" -
    fi
}

# aaa.push()
json_push(){ json_append "$@"; }

# aaa.append()
json_append(){
    local keypath="${1:?Provide variable name}" 
    local opv2="${2:?Provide value}"

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2
    
    local s
    if [ "$varname" ]; then
        s="$(awk -v op=append -v opv1="$opv1" -v opv2="$opv2" -f "$JSON_AWK_PATH" <<<"${!varname}")"
    else
        s="$(awk -v op=append -v opv1="$opv1" -v opv2="$opv2" -f "$JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

# aaa.prepend("value")
json_prepend(){
    local keypath=${1:?Provide variable name} 
    local opv2="${2:?Provide value}"

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2
    
    local s
    if [ "$varname" ]; then
        s="$(awk -v op=prepend -v opv1="$opv1" -v opv2="$opv2" -f "$JSON_AWK_PATH" <<<"${!varname}")"
    else
        s="$(awk -v op=prepend -v opv1="$opv1" -v opv2="$opv2" -f "$JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

# jo b.b= 2

: <<'DOCTEST'
> b={a:1}
> json_put b.b 2
> echo "$b"
{"a":1,"b":"2"}
DOCTEST
json_put(){
    local keypath="${1:?Provide variable name}"
    local opv2="${2:?Provide value}"

    local varname="${keypath%%.*}"
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2
    
    local s
    if [ "$varname" ]; then
        s="$(awk -v op=put -v opv1="$opv1" -v opv2="$opv2" -f "$JSON_AWK_PATH" <<<"${!varname}")"
    else
        s="$(awk -v op=put -v opv1="$opv1" -v opv2="$opv2" -f "$JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

# jo b.b
: <<'DOCTEST'
> b=[1,2,3]
> json_values b
1
2
3
DOCTEST
json_values(){
    local op=values
    if [ "$1" = "-r" ]; then
        op="values-r"
        shift
    fi

    local keypath=${1:?Provide variable name}

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1=""
    shift 2
    
    local s
    if [ "$varname" ]; then
        awk -v op="$op" -v opv1="$opv1" -f "$JSON_AWK_PATH" <<<"${!varname}"
    else
        awk -v op="$op" -v opv1="$opv1" -f "$JSON_AWK_PATH"
    fi
}

: <<'DOCTEST'
> b={a:1,b:2,c:3}
> json_values b
a
b
c
DOCTEST
json_keys(){
    local op=keys
    if [ "$1" = "-r" ]; then
        op=keys-r
        shift
    fi

    local keypath=${1:?Provide variable name}

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1=""
    shift 2
    
    local s
    if [ "$varname" ]; then
        awk -v op="$op" -v opv1="$opv1" -f "$JSON_AWK_PATH" <<<"${!varname}"
    else
        awk -v op="$op" -v opv1="$opv1" -f "$JSON_AWK_PATH"
    fi
}

# jo b.b
json_query(){
    local keypath=${1:?Provide variable name} 

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2

    if [ "$varname" ]; then
        awk -v op=extract -v opv1="$opv1" -f "$JSON_AWK_PATH" <<<"${!varname}"
    else
        awk -v op=extract -v opv1="$opv1" -f "$JSON_AWK_PATH" -
    fi
}

: <<'DOCTEST'
> b=[1,2,3]
> json_del b.[0]
> echo $b  # json_del
[2,3]
DOCTEST
json_del(){
    local keypath=${1:?Provide variable name} 

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2
    
    local s
    if [ "$varname" ]; then
        s="$(awk -v op=del -v opv1="$opv1" -f "$JSON_AWK_PATH" <<<"${!varname}")"
    else
        s="$(awk -v op=del -v opv1="$opv1" -f "$JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

: <<'DOCTEST'
> b=[1,2,3]
> json_shift b
> echo $b; # json_shift
[2,3]
DOCTEST
json_shift(){
    local keypath=${1:?Provide variable name}

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2

    local s
    if [ "$varname" ]; then
        s="$(awk -v op=shift -v opv1="$opv1" -f "$JSON_AWK_PATH" <<<"${!varname}")"
    else
        s="$(awk -v op=shift -v opv1="$opv1" -f "$JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}

: <<'DOCTEST'
> b=[1,2,3]
> json_length b
3
DOCTEST
json_length(){
    local keypath="${1:?Provide variable name}" 

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2
    
    if [ "$varname" ]; then
        awk -v op=length -v opv1="$opv1" -f "$JSON_AWK_PATH" <<<"${!varname}"
    else
        awk -v op=length -v opv1="$opv1" -f "$JSON_AWK_PATH"
    fi
}

: <<'DOCTEST'
> b=[1,2,3]
> json_pop b
> echo $b # json_pop
[1,2]
DOCTEST
json_pop(){
    local keypath="${1:?Provide variable name}"

    local varname=${keypath%%.*}
    local opv1=".${keypath#*.}"
    [ "$varname" == "$keypath" ] && opv1="."
    shift 2
    
    local s
    if [ "$varname" ]; then
        s="$(awk -v op=pop -v opv1="$opv1" -f "$JSON_AWK_PATH" <<<"${!varname}")"
    else
        s="$(awk -v op=pop -v opv1="$opv1" -f "$JSON_AWK_PATH")"
    fi
    local code=$?
    if [ $code -eq 0 ]; then eval "$varname=\"\$s\""
    else return 1;  fi
}


json_flat(){
    awk -v op=flat-leaf -f "$JSON_AWK_PATH"
}

json_array(){
    local s=
    while [ $# -gt 0 ]; do
        case "$1" in
            true|false|null)    s="$s,$1"   ;;
            [*)                s="$s,$1";;
            \{*)              s="$s,$1";;
            # =\"*)             s="$2,${1:1}"   ;;
            *)  if [[ "$1" =~ ^[+-]?[0-9]+(.[0-9]+)*([eE][0-9]+(.[0-9]+))*$ ]];       
                then s="$s,$1" ;
                else s="$s,\"${1//\"/\\\"}\"" ;
                fi
                ;;
        esac
        shift
    done
    echo "[${s:1}]"
}

# Using awk for posix sh
json_escape(){
    local a="${1:?Provide string}"
    a="$(echo "${a//$'\\'/\\}")"
    a="$(echo "${a//$'\n'/\\n}")"
    a="$(echo "${a//$'\t'/\\t}")"
    a="$(echo "${a//$'\b'/\\b}")"
    a="$(echo "${a//\"/\\\"}")"
    echo "\"$a\""
}

# Posix sh version?
json_unescape(){
    if [ $# -gt 0 ]; then
        eval echo "$@"
    else
        while read -r line; do
            eval echo -e "$line"
        done
    fi
}

# Reference: https://github.com/jpmens/jo/blob/master/jo.md
json_dict(){
    printf "{\n"

    local key value
    local first=0
    for i in "$@"; do
        if [ "$first" -eq 0 ]; then
            first=1
        else
            printf ',\n'
        fi

        key=${i%%=*}
        if [ "$key" != "$i" ]; then
            value=${i#*=}

            case "$value" in
            true|false|null|\{*\}|\[*\]|\"*)
                printf '  %s: %s' "$(json_escape "$key")" "$value" ;;
            *)
                if [[ "$value" =~ ^[+-]?[0-9]+(.[0-9]+)*([eE][0-9]+(.[0-9]+))*$ ]]; then
                    printf '  %s: %s' "$(json_escape "$key")" "$value"
                else
                    printf '  %s: %s' "$key" "$(json_escape "$value")"
                fi
            esac
            continue
        fi

        key=${i%%\:*}
        value=${i#*\:}
        printf '  %s: %s' "$(json_escape "$key")" "$(json_escape "$value")"
    done
    printf "\n}"
}

json_dict_compact(){
    printf "{"

    local key value
    local first=0
    for i in "$@"; do
        if [ "$first" -eq 0 ]; then
            first=1
        else
            printf ','
        fi

        key=${i%%=*}
        if [ "$key" != "$i" ]; then
            value=${i#*=}

            case "$value" in
            true|false|null|\{*\}|\[*\]|\"*)
                printf '%s:%s' "$(json_escape "$key")" "$value" ;;
            *)
                if [[ "$value" =~ ^[+-]?[0-9]+(.[0-9]+)*([eE][0-9]+(.[0-9]+))*$ ]]; then
                    printf '%s:%s' "$(json_escape "$key")" "$value"
                else
                    printf '%s:%s' "$key" "$(json_escape "$value")"
                fi
            esac
            continue
        fi

        key=${i%%\:*}
        value=${i#*\:}
        printf '%s: %s' "$(json_escape "$key")" "$(json_escape "$value")"
    done
    printf "}"
}


# Scheme 1:
# out_color_key = "\033[0;35m"
# out_color_string = "\033[0;34m"
# out_color_number = "\033[0;32m"
# out_color_null = "\033[0;33m"   # "\033[0;31m"
# out_color_true = "\033[7;32m"
# out_color_false = "\033[7;31m"

# Scheme 2:
# out_color_key = "\033[1;34m"
# out_color_string = "\033[0;33m"
# out_color_number = "\033[1;35m"
# out_color_null = "\033[0;31m"
# out_color_true = "\033[7;32m"
# out_color_false = "\033[7;31m"

# Scheme 3:
# out_color_key = "\033[1;33m"
# out_color_string = "\033[0;34m"
# out_color_number = "\033[0;35m"
# out_color_null = "\033[0;31m"
# out_color_true = "\033[7;32m"
# out_color_false = "\033[7;31m"

json_awk_color1(){
    local IFS=$' '
    A=(
    -v out_color_key="\033[0;35m"
    -v out_color_string="\033[0;34m"
    -v out_color_number="\033[0;32m"
    -v out_color_null="\033[0;33m"
    -v out_color_true="\033[7;32m"
    -v out_color_false="\033[7;31m"
    )
    echo "${A[*]}"
}

# TODO: Using JSON
json_table(){
    local n="${1:?Provide colume number}"
    shift
    local arr=() final=() idx=0 line IFS

    if [ $# -gt 0 ]; then
        for line in "$@"; do
            (( idx ++ ))
            arr+=("$line")
            if [ "$idx" -eq "$n" ]; then
                final+=("$(json_array "${arr[@]}")")
                arr=()
                idx=0
            fi
            
        done
    else
        while read -r line; do
            (( idx ++ ))
            arr+=("$line")
            if [ "$idx" -eq "$n" ]; then
                final+=("$(json_array "${arr[@]}")")
                arr=()
                idx=0
            fi
        done
    fi
    json_array "${final[@]}"
}

json_attrlist(){
    local arr=() final=() idx=0 line IFS

    while read -r line; do
        (( idx ++ ))
        arr+=("${!idx}=$line")
        if [ "$idx" -eq "$#" ]; then
            final+=("$(json_dict "${arr[@]}")")
            arr=()
            idx=0
        fi
    done

    json_array "${final[@]}"
}


# Move to json library
json_from_kv(){
    local first=0
    local k v

    local IFS=$'\n'
    # Using consider using environment.
    local PARSE_KEY_STR="$*"

    while :; do
        read -r k || break
        read -r v || break

        if [ "$first" -eq 0 ]; then
            printf "{\n"
            first=1
        else
            printf ',\n'
        fi

        if echo "$PARSE_KEY_STR" | grep -q "$k"; then
            # TODO: using float
            if [[ "$v" =~ ^[1-9]+([0-9])*$ ]] || [ "$v" = true ] || [ "$v" = false ]; then
                printf '  "%s": %s' "$k" "$v"
                continue
            fi
        fi

        printf '  "%s": "%s"' "$k" "$v"
    done
    [ $first -ne 0 ] && printf "\n}"
}

# Simply json stringify
# json_from_kv(){
#     printf "{\n"
#     local first=0
#     local k v
#     for i in $(list.print); do

#         if [ "$first" -eq 0 ]; then
#             first=1
#         else
#             printf ',\n'
#         fi

#         k=$(echo -n "$i" | cut -d ':' -f 1)
#         v=$(echo -n "$i" | cut -d ':' -f 2)

#         printf '  "%s": "%s"' "$(str.unbase64 "$k")" "$(str.unbase64 "$v")"
#     done
#     printf "\n}"
# }

